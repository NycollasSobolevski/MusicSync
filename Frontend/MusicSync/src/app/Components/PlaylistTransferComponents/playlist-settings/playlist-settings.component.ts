import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { NewPlaylist, itemsOfPlaylist } from 'src/app/services/SpotifyDto';
import { StreamerService } from 'src/app/services/Streamer.Service';
import { JwtWithData, jwt } from 'src/app/services/UserDto';

@Component({
  selector: 'app-playlist-settings',
  templateUrl: './playlist-settings.component.html',
  styleUrls: ['./playlist-settings.component.css','../main-card/main-card.component.css']
})
export class PlaylistSettingsComponent {
  playlistDataForm! : FormGroup;
  @Input() playlistId!: string;
  @Input() fromStreamer!: string;
  @Input() toStreamer!: string;
  @Output() PlaylistCreated = new EventEmitter();
  playlistDataObj! : itemsOfPlaylist;


  constructor( private service: StreamerService ) { }

  ngOnInit(): void {

    this.getPlaylistData();

    
    this.playlistDataForm = new FormGroup({
      title: new FormControl("", [Validators.required]),
      description: new FormControl("", [Validators.required]),
      checkPublic : new FormControl(true)
    })
  }

  get Title(){
    return this.playlistDataForm.get('title');
  }
  get Description(){
    return this.playlistDataForm.get('description');
  }
  get Public(){
    return this.playlistDataForm.get('checkPublic');
  }

  getPlaylistData(){
    const jwt : jwt = {
      value: sessionStorage.getItem("jwt")!
    }

    this.service
      .GetPlaylist(this.toStreamer,jwt,this.playlistId)
      .subscribe({
        next: (res) => {
          this.playlistDataObj = res;

          const name = this.playlistDataObj?.name;
          const description = this.playlistDataObj?.description;
          
          const waterMark = "Generated by Music Sync";
          this.playlistDataForm.get('title')?.setValue(name);
          this.playlistDataForm.get('description')?.setValue(`${description} \n ${waterMark}`);
          console.log('inserted data');
        }
      })

  }

  next(){
    if(!this.playlistDataForm.valid)
      return;
    var data : NewPlaylist = {
      name: this.Title?.value,
      description: this.Description?.value,
      public: this.Public?.value
    }
    const body : JwtWithData<NewPlaylist> = {
      jwt : {
        value: sessionStorage.getItem("jwt")!
      },
      data: data
    }
    this.service
      .CreatePlaylist(this.toStreamer, body )
      .subscribe({
        next: (res) => {
          console.log("playlist created");
          this.PlaylistCreated.emit(`Created: ${res.id}`);
        }
      })
  }
  
}
